% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrap.R
\name{bootstrap_experiment}
\alias{bootstrap_experiment}
\alias{bs_sim}
\alias{compare_methods}
\alias{qntl}
\alias{quantile_ev}
\alias{red_se}
\alias{se_ci}
\alias{ss_quantiles}
\title{Experimenting with sampling and calculating confidence intervals in bootstrapping}
\usage{
bootstrap_experiment(funs, nrange = c(1000, 10000), rrange = c(0.25, 0.75),
  mus = c(0, 4.5), sigmas = c(1, 5.5), bsi_range = c(1000, 10000),
  length.out = 5, niter = 5)

compare_methods(param, funs)

bs_sim(x, bsi, replace, funs, n, b, ..., probs = c(0.025, 0.975))

red_se(x, probs = c(0.025, 0.975), n, b, xbar)

ss_quantiles(x, probs = c(0.025, 0.975), n, b, xbar)

quantile_ev(x, probs = c(0.025, 0.975), n, b, xbar, int = c(-500, 500))

se_ci(x, probs = c(0.025, 0.975), ...)

qntl(x, probs = c(0.025, 0.975), ...)
}
\arguments{
\item{funs}{a list of functions for calculating confidence intervals}

\item{nrange}{the length of the vector}

\item{rrange}{the portion of the vector's length used in each subsample}

\item{mus}{the mean of the sampling distribution}

\item{sigmas}{the variance of the sampling distribution}

\item{bsi_range}{the number of bootstrap iterations}

\item{length.out}{the number of parameters drawn from the range}

\item{niter}{the number of repetitions for each parameter combination}
}
\value{
The function \code{experiment} generates the test, which results in a data frame
that contains:

\itemize{
     \item{the confidence interval method}
     \item{whether replacement was used in sampling}
     \item{the upper and lower limits of the confidence interval}
     \item{the combination of sampling parmaters}
     \item{the bias of the upper and lower CI limits}
     \item{the sum of the square biases}
}
}
\description{
When bootstrapping, we are traditionally instructed to generate a sample equal in
size to the entire dataset. We can shortcut this method, as long as we are willing to
make certain adjustments when calculating confidence intervals. Two alternative
sampling methods are tested here, one with replacement and the other without.
}
\details{
The primary functions simulate data for estimating bootstrapped CIs for the mean of a
normally-distributed vector. They accept ranges for the simulation parameters. These
are described in the parameters. The experiment is generic in that you can pass it
multiple different functions for calculating confidence intervals in a list. When
these functions have different parameters, it is usually necessary to have \code{...}
in all of their arguments.

The simulation is split across one function to generate parameters and iterators,
and a second function that executes a single iteration. That function also relies
on a generic bootstrap simulator.
}
\section{Functions}{
\itemize{
\item \code{compare_methods}: One iteration of bootstrap experiment

\item \code{bs_sim}: A generic bootstrap estimator

\item \code{red_se}: Adjusting standard errors for smaller samples

\item \code{ss_quantiles}: Subsamping quantiles (using differences)

\item \code{quantile_ev}: Subsamping quantiles (with empirical distribution function)

\item \code{se_ci}: Another confidence interval function

\item \code{qntl}: A curried version of quantile to catch unnecessary arguments
}}
\examples{
\dontrun{
 red_se <- function(x, probs = c(.025, .975), n, b, mu) {
     se <- sd(x) * sqrt(b / n)
     qnorm(probs, mu, se)
 }

 funs <- list(se = red_se)
 test <- bootstrap_experiment(funs, length.out = 2, niter = 2)
}

}

