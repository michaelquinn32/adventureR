{
    "collab_server" : "",
    "contents" : "#' Linear Discriminant Analysis\n#'\n#' Fit a classifier using a generalization of Fischer's linear discriminant.\n#'\n#' The result is found using a relatively simple formula where the components of a discriminant hyper\n#' plane are found separately. This makes it easier to generate predictions later.\n#'\n#' \\deqn{f(x) = 1 \\mathrm{ if } a \\cdot x + b > 0}\n#' \\deqn{a = \\Sigma^{-1} \\mu_1 - \\mu_0}\n#' \\deqn{b = -\\frac{1}{2} \\mu_1 ' \\Sigma^{-1} \\mu_1 +\n#'          \\frac{1}{2} \\mu_0 ' \\Sigma^{-1} \\mu_0 +\n#'          \\log \\frac{p_1}{p_0}}\n#'\n#' @param formula An R formual specifying the LDA\n#' @param data An R data frame\n#'\n#' @return A list with the following items\n#' \\describe{\n#'      \\item{actual}{the original target values}\n#'      \\item{x}{the original model data matrix}\n#'      \\item{fit}{the class values}\n#'      \\item{preds}{the values of the linear combination}\n#'      \\item{a}{the LDA coefficients}\n#'      \\item{b}{the LDA threshold, or intercept}\n#' }\n#'\n#' @export\n\nLDA <- function(formula, data) {\n    # Set up the model frame from the formula\n    mf <- model.frame(formula, data)\n    x <- mf[-1]\n    y <- mf[[1]]\n\n    # Assertions\n    stopifnot(length(unique(y)) == 2)\n\n    # Model params\n    n <- length(y)\n    ns <- map(split(y, y), length)\n    ps <- map(ns, ~ .x / n)\n    p_rat <- reduce_right(ps, `/`)\n\n    # Group means\n    groups <- split(x, y)\n    mus <- at_depth(groups, 1, map_dbl, mean)\n\n    # Sigma hat\n    centered <- map2(groups, mus, sweep, MARGIN = 2)\n    cps <- map(centered, ~ crossprod(as.matrix(.x)))\n    sigma_hat <- 1/ (n - 2) * reduce(cps, `+`)\n    prec_hat <- solve(sigma_hat)\n\n    # LDA Parameters\n    qfs <- map_dbl(mus, ~ quadform(prec_hat, .x))\n    a <- prec_hat %*% reduce_right(mus, `-`)\n    b <- crossprod(qfs, c(.5, -.5)) + log(p_rat)\n\n    # Predictions\n    preds <- apply(x, 1, function(.x) crossprod(a, .x) + b)\n\n    # Return\n    results <- list(actual = y, x = x, fit = as.numeric(preds > 0), preds = preds, a = a, b = b)\n    structure(results, class = \"lda\")\n}\n\n#' @describeIn LDA\n#' Quickly process quadratic forms (support for LDA)\n#'\n#' @param X a matrix\n#' @param a a vector of suitable dimension\n#'\n#' @return A numeric scalar\n#' @export\n\nquadform <- function(X, a) {\n    crossprod(a, X %*% a)\n}",
    "created" : 1449336158907.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "777375519",
    "id" : "38C9E938",
    "lastKnownWriteTime" : 1449336533,
    "path" : "~/Projects/adventureR/R/LDA.R",
    "project_path" : "R/LDA.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}