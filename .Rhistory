library("roxygen2", lib.loc="~/Library/R/3.1/library")
install.packages("roxygen2")
library(dplyr)
library(readr)
library(knitr)
source("draft_posts/2015-12-02-spam-functions.R")
options(digits = 4)
# Links -------------------------------------------------------------------
spam_http <- "https://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.data"
spam_names <- "https://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.names"
# Get Data ----------------------------------------------------------------
col_names <- read_lines(spam_names, skip = 33) %>% gsub(":.*", "", .) %>% c("target")
col_types <- c(replicate(55, col_double()), replicate(3, col_integer()))
spam_data <- read_csv(spam_http, col_names = col_names, col_types = col_types)
# Basic EDA ---------------------------------------------------------------
summary_funs <- list(n = length,
nmiss = compose(sum, is.na),
mean = partial(mean, na.rm = TRUE),
sd = partial(sd, na.rm = TRUE),
min = partial(min, na.rm = TRUE),
p25 = partial(quantile, probs = .25, names = FALSE, na.rm = TRUE),
median = partial(median, na.rm = TRUE),
p75 = partial(quantile, probs = .75, names = FALSE, na.rm = TRUE),
max = partial(max, na.rm = TRUE))
spam_data[-58] %>% map(~ invoke(summary_funs, .x)) %>%
map_call(rbind.data.frame) %>%
kable
spam_data %>% count(target) %>% kable
# Implementing the Experiment ---------------------------------------------
#' Sampling function for bootstrap
#'
#' @param .data a data frame
#' @param .test_rate the (approximate) portion of the data allocated to test data
#'
#' @return a list of two dataframes, the training and test dataset
split_data <- function(.data, .test_rate = 0.1) {
n <- nrow(.data)
svec <- sample(c("train", "test"), n, replace = TRUE, prob = c(1 - .test_rate, .test_rate))
split(.data, svec)
}
# Fit and score model
lda1 <- LDA(target ~ ., spam_data)
score_model(lda1)
# Compare results to MASS::lda
table(fit = lda1$fit, actual = lda1$actual)
MASS::lda(target ~ . , spam_data) %>%
predict %>%
.$class %>%
table(spam_data$target)
# Fit and score model
nb1 <- naive_bayes(target ~ ., spam_data)
score_model(nb1)
# Compare to caret nb
library(caret)
mod <- train(spam_data[-58],
as.factor(spam_data$target),
method = 'nb',
trControl = trainControl(method = 'none'),
tuneGrid = data.frame(fL = 0, usekernel = FALSE))
predict(mod)
str(mod)
names(mod)
mod$trainingData
mod$trainingData %>% train
mod$trainingData %>% str
mod$trainingData[[-".outcome"]]
mod$trainingData[-".outcome"]
str(mod)
names(mod)
devtools::load_all(".")
devtools::load_all(".")
score_model(mod)
devtools::load_all(".")
score_model(mod)
traceback()
st <- predict(mod)
levels(st)[st]
levels(st)[st] %>% as.numeric
devtools::load_all(".")
score_model(mod)
traceback()
devtools::load_all(".")
score_model(mod)
warnings()
devtools::load_all(".")
score_model(mod)
library(OSClust)
library(OSClust)
library(OSClust)
library(OSClust)
install.packages('devtools')
library(OSClust)
library("devtools", lib.loc="~/Library/R/3.1/library")
devtools::document(roclets=c('rd', 'collate', 'namespace'))
library(OSClust)
library(OSClust)
search()
